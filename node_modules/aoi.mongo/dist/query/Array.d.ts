import { IncrementalString } from "../IncString";
import { Filter as MongoFilter } from "mongodb";
import { Document, Types } from "../Types";
import { ArbitraryFilter } from "./Filter";
import { Length } from "./Length";
/** A filter which work with arrays */
export declare class ArrayFilter<T extends Types, TData extends unknown[]> {
    protected readonly path: string;
    protected readonly str: IncrementalString;
    protected readonly expr: Record<string, unknown>;
    protected readonly filter: MongoFilter<Document<T>>;
    constructor(str: IncrementalString, path: string, filter: MongoFilter<Document<T>>, expr: Record<string, unknown>);
    /** The array length filter */
    get length(): Length<T>;
    /** Filter for the first element of array */
    first(): TData extends [infer E, ...unknown[]] ? ArbitraryFilter<T, E> : TData extends (infer E)[] ? ArbitraryFilter<T, E> : never;
    /** Filter for the last element of array */
    last(): TData extends [...unknown[], infer E] ? ArbitraryFilter<T, E> : TData extends (infer E)[] ? ArbitraryFilter<T, E> : never;
    /** Filter for the specific element of array */
    at<P extends Exclude<Partial<TData>["length"], TData["length"]> & number>(index: P | number): ArbitraryFilter<T, TData[P]>;
}
