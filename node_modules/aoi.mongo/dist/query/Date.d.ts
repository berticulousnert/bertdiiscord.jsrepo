import { IncrementalString } from "../IncString";
import { Filter as MongoFilter } from "mongodb";
import { Document, Types } from "../Types";
import { NumFilter } from "./Number";
import { Match } from "./Match";
/** A filter which work with dates */
export declare class DateFilter<T extends Types> {
    protected readonly path: string;
    protected readonly str: IncrementalString;
    protected readonly expr: Record<string, unknown>;
    protected readonly filter: MongoFilter<Document<T>>;
    constructor(str: IncrementalString, path: string, filter: MongoFilter<Document<T>>, expr: Record<string, unknown>);
    /** Filter if date is equal */
    equal(date: Date): Match<T>;
    /** Filter if date is not equal */
    notEqual(date: Date): Match<T>;
    /** Filter of the date difference */
    diff(date: Date): NumFilter<T>;
    /** Millisecond of the date between 0 to 999 */
    get millisecond(): NumFilter<T>;
    /** Second of the date between 0 to 60 */
    get second(): NumFilter<T>;
    /** Minute of the date between 0 to 59 */
    get minute(): NumFilter<T>;
    /** Hour of the date between 0 to 23 */
    get hour(): NumFilter<T>;
    /** Day of the month (date) of the date between 1 to 33 */
    get date(): NumFilter<T>;
    /** Month of the date between 1 to 12 */
    get month(): NumFilter<T>;
    /** Year of the date, ex. 2019 */
    get year(): NumFilter<T>;
    /** Filter if the comparison return true */
    compare(operator: "$eq" | "$ne", date: Date): Match<T>;
    /** Date expression filter */
    expression(expr: "$millisecond" | "$second" | "$minute" | "$hour" | "$dayOfMonth" | "$month" | "$year"): NumFilter<T>;
}
