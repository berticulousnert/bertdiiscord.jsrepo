"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateFilter = void 0;
const Number_1 = require("./Number");
const Match_1 = require("./Match");
/** A filter which work with dates */
class DateFilter {
    constructor(str, path, filter, expr) {
        this.str = str;
        this.path = path;
        this.filter = filter;
        this.expr = expr;
    }
    /** Filter if date is equal */
    equal(date) {
        return this.compare("$eq", date);
    }
    /** Filter if date is not equal */
    notEqual(date) {
        return this.compare("$ne", date);
    }
    /** Filter of the date difference */
    diff(date) {
        const expr = {};
        const variable = this.str.str;
        const filter = new Number_1.NumFilter(`$$${variable}`, this.filter, expr);
        this.expr.$let = {
            vars: {
                [variable]: {
                    $dateDiff: {
                        startDate: this.path,
                        endDate: {
                            $literal: date
                        },
                        unit: "millisecond"
                    }
                }
            },
            in: expr
        };
        return filter;
    }
    /** Millisecond of the date between 0 to 999 */
    get millisecond() {
        return this.expression("$millisecond");
    }
    /** Second of the date between 0 to 60 */
    get second() {
        return this.expression("$second");
    }
    /** Minute of the date between 0 to 59 */
    get minute() {
        return this.expression("$minute");
    }
    /** Hour of the date between 0 to 23 */
    get hour() {
        return this.expression("$hour");
    }
    /** Day of the month (date) of the date between 1 to 33 */
    get date() {
        return this.expression("$dayOfMonth");
    }
    /** Month of the date between 1 to 12 */
    get month() {
        return this.expression("$month");
    }
    /** Year of the date, ex. 2019 */
    get year() {
        return this.expression("$year");
    }
    /** Filter if the comparison return true */
    compare(operator, date) {
        const match = new Match_1.Match(this.filter);
        this.expr[operator] = [this.path, {
                $literal: date
            }];
        return match;
    }
    /** Date expression filter */
    expression(expr) {
        const expression = {};
        const variable = this.str.str;
        const filter = new Number_1.NumFilter(`$$${variable}`, this.filter, expression);
        this.expr.$let = {
            vars: {
                [variable]: {
                    [expr]: this.path
                }
            },
            in: expression
        };
        return filter;
    }
}
exports.DateFilter = DateFilter;
