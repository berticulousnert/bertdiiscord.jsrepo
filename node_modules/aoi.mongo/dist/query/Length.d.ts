import { Filter as MongoFilter } from "mongodb";
import { Document, Types } from "../Types";
import { Match } from "./Match";
/** A filter which work with data length */
export declare class Length<T extends Types> {
    protected readonly path: string;
    protected readonly operator: string;
    protected readonly expr: Record<string, unknown>;
    protected readonly filter: MongoFilter<Document<T>>;
    constructor(operator: string, path: string, filter: MongoFilter<Document<T>>, expr: Record<string, unknown>);
    /** Filter if length is equal */
    equal(length: number): Match<T>;
    /** Filter if length is not equal */
    notEqual(length: number): Match<T>;
    /** Filter if length is greater than */
    greaterThan(length: number): Match<T>;
    /** Filter if length is greater than or equal */
    greaterThanEqual(length: number): Match<T>;
    /** Filter if length is less than */
    lessThan(length: number): Match<T>;
    /** Filter if length is less than or equal */
    lessThanEqual(length: number): Match<T>;
    /** Filter if the comparison return true */
    compare(operator: "$eq" | "$ne" | "$gt" | "$gte" | "$lt" | "$lte", length: number): Match<T>;
}
