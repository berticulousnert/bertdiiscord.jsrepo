import { Filter as MongoFilter } from "mongodb";
import { Document, Types } from "../Types";
import { Match } from "./Match";
/** A filter which work with bigints */
export declare class BigFilter<T extends Types> {
    protected readonly path: string;
    protected readonly expr: Record<string, unknown>;
    protected readonly filter: MongoFilter<Document<T>>;
    constructor(path: string, filter: MongoFilter<Document<T>>, expr: Record<string, unknown>);
    /** Filter if bigint is equal */
    equal(big: bigint): Match<T>;
    /** Filter if bigint is not equal */
    notEqual(big: bigint): Match<T>;
    /** Filter if bigint is greater than */
    greaterThan(big: bigint): Match<T>;
    /** Filter if bigint is greater than or equal */
    greaterThanEqual(big: bigint): Match<T>;
    /** Filter if bigint is less than */
    lessThan(big: bigint): Match<T>;
    /** Filter if bigint is less than or equal */
    lessThanEqual(big: bigint): Match<T>;
    /** Filter if the comparison return true */
    compare(operator: "$eq" | "$ne" | "$gt" | "$gte" | "$lt" | "$lte", big: bigint): Match<T>;
}
