import { Match } from "./Match";
import { Mongo } from "../Mongo";
import { Cursor } from "../Cursor";
import { Document, Doc, Types } from "../Types";
import { Filter, FindOptions, UpdateResult, DeleteResult, UpdateOptions, DeleteOptions } from "mongodb";
/** A wrapper class for querying */
export declare class Query<T extends Types> {
    protected readonly mongo: Mongo<T>;
    protected readonly filter: Filter<Document<T>>;
    constructor(mongo: Mongo<T>, match: Match<T>);
    /** Find one matched document */
    findOne(options?: FindOptions): Promise<Doc<T> | null>;
    /** Find all matched document */
    findMulti(options?: FindOptions): Promise<Cursor<T>>;
    /** Update one matched document */
    updateOne(value: T, options?: UpdateOptions): Promise<UpdateResult>;
    /** Update all matched document */
    updateMulti(value: T, options?: UpdateOptions): Promise<UpdateResult>;
    /** Rename a matched document to another key */
    rename(key: string, options?: UpdateOptions): Promise<UpdateResult>;
    /** Delete one matched document */
    deleteOne(options?: DeleteOptions): Promise<DeleteResult>;
    /** Delete all matched document */
    deleteMulti(options?: DeleteOptions): Promise<DeleteResult>;
}
