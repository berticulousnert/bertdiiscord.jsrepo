import { Cursor } from "./Cursor";
import { Filter, Query, Match } from "./query";
import { Doc, Document, Types } from "./Types";
import { Db, DbOptions, Collection, MongoClient, UpdateResult, DeleteResult, IndexDirection, CollectionOptions, CreateIndexesOptions } from "mongodb";
/** The options that must be passed to mongo instance */
export interface MongoOptions {
    /** The mongo client used */
    client: MongoClient;
    /** The database used */
    dbName: string;
    /** The collection used */
    collectionName: string;
    /** The options for the db */
    dbOptions?: DbOptions;
    /** The options for the collection */
    collectionOptions?: CollectionOptions;
}
/** The mongo instance constructor */
export declare class Mongo<T extends Types> {
    /** The mongo client used */
    readonly client: MongoClient;
    /** The database instance used */
    readonly db: Db;
    /** The collection instance used */
    readonly collection: Collection<Document<T>>;
    /**
     * @param options The options for the mongo instance
     */
    constructor(options: MongoOptions);
    /**
     * Set a data into the collection
     * @param key The data key
     * @param value The data value
     */
    set(key: string, value: T): Promise<UpdateResult>;
    /**
     * Get a document from the collection
     * @param key The document key
     */
    get(key: string): Promise<Doc<T> | null>;
    /**
     * Delete a document from the collection
     * @param key The document key
     */
    delete(key: string): Promise<DeleteResult>;
    /**
     * Find and match all document key with the matcher in the collection
     * @param matcher The matcher in regex
     */
    match(matcher: RegExp): Promise<Cursor<T>>;
    /**
     * Get all document in the collection
     */
    all(): Promise<Cursor<T>>;
    /** Create an index in the ocllection */
    index(indexSpec: {
        key?: IndexDirection;
        data?: IndexDirection | {
            [K in keyof T]: IndexDirection;
        };
    }, options?: CreateIndexesOptions): Promise<void>;
    /** Create a query object */
    query(match: Match<T>): Query<T>;
    /** Shortcut for creating filter */
    filter(): Filter<T>;
}
